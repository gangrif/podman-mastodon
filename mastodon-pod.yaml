# Save the output of this file and use kubectl create -f to import
# it into Kubernetes.
#
# Created with podman-4.1.1
# Note:
#  This I have cleaned the identifying information out of this file, so it can be shared as a base for other mastodon deployments.
#  A few things: 
#    - The various container images are locked to specific versions, this was suggested by the how-to I followed (linked on the next line) when standing up Mastodon
#      - HOWTO: https://www.linode.com/docs/guides/install-mastodon-server-on-centos-stream/
#    - You'll want to look up the latest versions of mastodon, redis, and postgres, and adjust accordingly.  
#    - The howto above also uses some static content from the mastodon git repo, you will need to incorporate that somehow, I put these containers behind nginx
#       - nginx hosts that static content for me, and proxies to the containers.  You'll have to deal with that in kube if thats your goal.
apiVersion: v1
kind: Pod
metadata:
  annotations:
    io.kubernetes.cri-o.ContainerType/db: container
    io.kubernetes.cri-o.ContainerType/redis: container
    io.kubernetes.cri-o.ContainerType/sidekiq: container
    io.kubernetes.cri-o.ContainerType/streaming: container
    io.kubernetes.cri-o.ContainerType/web: container
    io.kubernetes.cri-o.SandboxID/db: mastodon
    io.kubernetes.cri-o.SandboxID/redis: mastodon
    io.kubernetes.cri-o.SandboxID/sidekiq: mastodon
    io.kubernetes.cri-o.SandboxID/streaming: mastodon
    io.kubernetes.cri-o.SandboxID/web: mastodon
    io.kubernetes.cri-o.TTY/db: "false"
    io.kubernetes.cri-o.TTY/redis: "false"
    io.kubernetes.cri-o.TTY/sidekiq: "false"
    io.kubernetes.cri-o.TTY/streaming: "false"
    io.kubernetes.cri-o.TTY/web: "false"
    io.podman.annotations.autoremove/db: "FALSE"
    io.podman.annotations.autoremove/redis: "FALSE"
    io.podman.annotations.autoremove/sidekiq: "FALSE"
    io.podman.annotations.autoremove/streaming: "FALSE"
    io.podman.annotations.autoremove/web: "FALSE"
    io.podman.annotations.init/db: "FALSE"
    io.podman.annotations.init/redis: "FALSE"
    io.podman.annotations.init/sidekiq: "FALSE"
    io.podman.annotations.init/streaming: "FALSE"
    io.podman.annotations.init/web: "FALSE"
    io.podman.annotations.privileged/db: "FALSE"
    io.podman.annotations.privileged/redis: "FALSE"
    io.podman.annotations.privileged/sidekiq: "FALSE"
    io.podman.annotations.privileged/streaming: "FALSE"
    io.podman.annotations.privileged/web: "FALSE"
    io.podman.annotations.publish-all/db: "FALSE"
    io.podman.annotations.publish-all/redis: "FALSE"
    io.podman.annotations.publish-all/sidekiq: "FALSE"
    io.podman.annotations.publish-all/streaming: "FALSE"
    io.podman.annotations.publish-all/web: "FALSE"
  creationTimestamp: "2022-11-04T02:00:31Z"
  labels:
    app: mastodon
  name: mastodon
spec:
  containers:
  - args:
    - postgres
#    envFrom:
#    - configMapRef:
#      name: mastodon-env
    env:
    - name: POSTGRES_USER
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_USER
    - name: POSTGRES_PASS
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_PASS
    - name: POSTGRES_DB
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_DB
    image: docker.io/library/postgres:14-alpine
    name: db
    ports:
    - containerPort: 3000
      hostPort: 3000
    - containerPort: 4000
      hostPort: 4000
    - containerPort: 9200
      hostPort: 9200
    resources: {}
    securityContext:
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
    volumeMounts:
    - mountPath: /var/lib/postgresql/data
      name: mastodon-vol-db-pvc
  - args:
    - redis-server
    image: docker.io/library/redis:7-alpine
    name: redis
    resources: {}
    securityContext:
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
    volumeMounts:
    - mountPath: /data
      name: mastodon-vol-redis-pvc
  - command: ['node']
    args: ['./streaming']
#    envFrom:
#    - configMapRef:
#      name: mastodon-env
    env:
    - name: DB_USER
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_USER
    - name: SECRET_KEY_BASE
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SECRET_KEY_BASE
    - name: LOCAL_DOMAIN
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: LOCAL_DOMAIN
    - name: REDIS_HOST
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: REDIS_HOST
    - name: IP_RETENTION_PERIOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: IP_RETENTION_PERIOD
    - name: DB_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: DB_PORT
    - name: DB_HOST
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: DB_HOST 
    - name: DB_NAME
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_DB
    - name: DB_PASS
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_PASS
    - name: REDIS_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: REDIS_PORT
    - name: SESSION_RETENTION_PERIOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SESSION_RETENTION_PERIOD
    - name: VAPID_PUBLIC_KEY
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: VAPID_PUBLIC_KEY
    - name: VAPID_PRIVATE_KEY
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: VAPID_PRIVATE_KEY
    - name: OTP_SECRET
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: OTP_SECRET
    image: docker.io/tootsuite/mastodon:v3.5.3
    name: streaming
    resources: {}
    securityContext:
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
  - command: ['bundle']
    args: ['exec', 'sidekiq']
#    envFrom:
#    - configMapRef:
#      name: mastodon-env
    env:
    - name: DB_USER
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_USER
    - name: SMTP_FROM_ADDRESS
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_FROM_ADDRESS 
    - name: SECRET_KEY_BASE
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SECRET_KEY_BASE
    - name: LOCAL_DOMAIN
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: LOCAL_DOMAIN
    - name: REDIS_HOST
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: REDIS_HOST
    - name: IP_RETENTION_PERIOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: IP_RETENTION_PERIOD
    - name: DB_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: DB_PORT
    - name: DB_HOST
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: DB_HOST 
    - name: DB_NAME
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_DB
    - name: DB_PASS
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_PASS
    - name: REDIS_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: REDIS_PORT
    - name: SMTP_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_PORT
#    - name: SMTP_SSL
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_SSL
#    - name: SMTP_TLS
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_TLS
#    - name: SMTP_ENABLE_STARTTLS_AUTO
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_ENABLE_STARTTLS_AUTO
#    - name: SMTP_OPENSSL_VERIFY_MODE
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_OPENSSL_VERIFY_MODE
    - name: SMTP_DELIVERY_METHOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_DELIVERY_METHOD
    - name: SESSION_RETENTION_PERIOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SESSION_RETENTION_PERIOD
    - name: VAPID_PUBLIC_KEY
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: VAPID_PUBLIC_KEY
    - name: SMTP_SERVER
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_SERVER
    - name: VAPID_PRIVATE_KEY
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: VAPID_PRIVATE_KEY
    - name: OTP_SECRET
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: OTP_SECRET
    image: docker.io/tootsuite/mastodon:v3.5.3
    name: sidekiq
    resources: {}
    securityContext:
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
    volumeMounts:
    - mountPath: /mastodon/public/system
      name: mastodon-vol-pubsys-pvc

  - command: ['/bin/bash']
    args: ["-c", "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"]
#    envFrom:
#    - configMapRef:
#      name: mastodon-env
    env:
    - name: DB_USER
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_USER
    - name: SMTP_FROM_ADDRESS
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_FROM_ADDRESS 
    - name: SECRET_KEY_BASE
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SECRET_KEY_BASE
    - name: LOCAL_DOMAIN
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: LOCAL_DOMAIN
    - name: REDIS_HOST
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: REDIS_HOST
    - name: IP_RETENTION_PERIOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: IP_RETENTION_PERIOD
    - name: DB_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: DB_PORT
    - name: DB_HOST
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: DB_HOST 
    - name: DB_NAME
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_DB
    - name: DB_PASS
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: POSTGRES_PASS
    - name: REDIS_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: REDIS_PORT
    - name: SMTP_PORT
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_PORT
#    - name: SMTP_SSL
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_SSL
#    - name: SMTP_TLS
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_TLS
#    - name: SMTP_ENABLE_STARTTLS_AUTO
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_ENABLE_STARTTLS_AUTO
#    - name: SMTP_OPENSSL_VERIFY_MODE
#      valueFrom:
#        configMapKeyRef:
#          name: mastodon-env
#          key: SMTP_OPENSSL_VERIFY_MODE
    - name: SMTP_DELIVERY_METHOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_DELIVERY_METHOD
    - name: SESSION_RETENTION_PERIOD
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SESSION_RETENTION_PERIOD
    - name: VAPID_PUBLIC_KEY
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: VAPID_PUBLIC_KEY
    - name: SMTP_SERVER
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: SMTP_SERVER
    - name: VAPID_PRIVATE_KEY
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: VAPID_PRIVATE_KEY
    - name: OTP_SECRET
      valueFrom:
        configMapKeyRef:
          name: mastodon-env
          key: OTP_SECRET
    image: docker.io/tootsuite/mastodon:v3.5.3
    name: web
    resources: {}
    securityContext:
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
    volumeMounts:
    - mountPath: /mastodon/public/system
      name: mastodon-vol-pubsys-pvc
  restartPolicy: Never
  # Volumes for the various data you need persistent.  I used NFS volumes, you can use whatever, just make sure the names match what you define below
  ### COMMENT THESE OUT OF YOU ARE USING LOCAL STORAGE INSTEAD OF PODMAN VOLUMES ###
  volumes:
  - name: mastodon-vol-db-pvc
    persistentVolumeClaim:
      claimName: mastodon-vol-db
  - name: mastodon-vol-redis-pvc
    persistentVolumeClaim:
      claimName: mastodon-vol-redis
  - name: mastodon-vol-pubsys-pvc
    persistentVolumeClaim:
      claimName: mastodon-vol-pubsys

# Below this line are local directory "hostpath" volumes created to mimmic the volume defs if you're using local storage instead.
#  volumes:
#  - hostPath:
#      path: /srv/mastodon/db/
#      type: Directory
#    name: mastodon-vol-db-pvc
#  - hostPath:
#      path: /srv/mastodon/redis/
#      type: Directory
#    name: mastodon-vol-redis-pvc
#  - hostPath:
#      path: /srv/mastodon/pubsys/
#      type: Directory
#    name: mastodon-vol-pubsys-pvc

status: {}

